const fs = require('fs');
const path = require('path');

function findFiles(dir, pattern) {
  const files = [];
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      files.push(...findFiles(fullPath, pattern));
    } else if (pattern.test(item)) {
      files.push(fullPath);
    }
  }
  
  return files;
}

function removeForceStatic(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    
    content = content.replace(/export const dynamic = ['"]force-static['"];?\s*/g, '');
    
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω force-static –∏–∑: ${filePath}`);
      return true;
    } else {
      console.log(`‚ÑπÔ∏è  force-static –Ω–µ –Ω–∞–π–¥–µ–Ω –≤: ${filePath}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
    return false;
  }
}

function main() {
  console.log('üîç –ü–æ–∏—Å–∫ API —Ä–æ—É—Ç–æ–≤...');
  
  const apiDir = path.join(__dirname, 'app', 'api');
  
  if (!fs.existsSync(apiDir)) {
    console.log('‚ùå –ü–∞–ø–∫–∞ app/api –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }
  
  const routeFiles = findFiles(apiDir, /route\.ts$/);
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${routeFiles.length} API —Ä–æ—É—Ç–æ–≤`);
  
  let removedCount = 0;
  
  for (const file of routeFiles) {
    if (removeForceStatic(file)) {
      removedCount++;
    }
  }
  
  console.log(`\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£–¥–∞–ª–µ–Ω–æ force-static –∏–∑ ${removedCount} —Ñ–∞–π–ª–æ–≤`);
}

main(); 